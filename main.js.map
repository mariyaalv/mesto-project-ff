{"version":3,"file":"main.js","mappings":"mBAQO,SAASA,EAAYC,EAAcC,EAAMC,EAAQC,EAAkDC,GAAQ,IAAtDC,EAAYF,EAAZE,aAAcC,EAAgBH,EAAhBG,iBAAkBC,EAAUJ,EAAVI,WACpFC,EAAcR,EAAaS,cAAcP,EAASQ,MAAMC,WAAU,GAClEC,EAAYJ,EAAYC,cAAcP,EAASW,OAC/CC,EAAiBN,EAAYC,cAAcP,EAASa,YACpDC,EAAaR,EAAYC,cAAcP,EAASe,OAChDC,EAAmBV,EAAYC,cAAcP,EAASiB,cA2B5D,OAzBAP,EAAUQ,IAAMnB,EAAKoB,KACrBT,EAAUU,IAAM,UAAHC,OAAatB,EAAKuB,MAC/BhB,EAAYC,cAAcP,EAASuB,OAAOC,YAAczB,EAAKuB,KAEzDvB,EAAK0B,MAAMC,MAAQxB,GAAUC,EAC/Ba,EAAiBW,iBAAiB,SAAS,WACzCxB,EAAaJ,EAAK2B,IAAKpB,EACzB,IAEAU,EAAiBY,SAGH7B,EAAKgB,MAAMc,MAAK,SAACC,GAAI,OAAKA,EAAKJ,MAAQxB,CAAM,KAE3DU,EAAemB,UAAUC,IAAIhC,EAASiC,kBAGxCnB,EAAWU,YAAczB,EAAKgB,MAAMmB,OAEhC7B,GACFO,EAAee,iBAAiB,SAAS,kBAAMtB,EAAWN,EAAK2B,IAAK3B,EAAMG,EAAQU,EAAgBE,EAAW,IAG/GJ,EAAUiB,iBAAiB,SAAS,kBAAMvB,EAAiBL,EAAK,IAEzDO,CACT,CCxCO,SAAS6B,EAAWC,GACzBA,EAAaL,UAAUC,IAAI,mBAC3BK,SAASV,iBAAiB,UAAWW,EACvC,CAGO,SAASC,EAAYH,GAC1BA,EAAaL,UAAUH,OAAO,mBAC9BS,SAASG,oBAAoB,UAAWF,EAC1C,CAGA,SAASA,EAAYG,GACJ,WAAZA,EAAIC,KACLH,EAAWF,SAAS9B,cAAc,oBAEtC,CChBA,IAOMoC,EAAiB,SAACC,EAAMC,EAAOC,GACnC,IAAMC,EAAQH,EAAKrC,cAAc,IAADc,OAAKwB,EAAMG,GAAE,WAC7CH,EAAMd,UAAUH,OAAOkB,EAAOG,iBAC9BF,EAAMhB,UAAUH,OAAOkB,EAAOI,YAC9BH,EAAMvB,YAAc,EACtB,EAwBM2B,EAAoB,SAACC,EAAWC,EAAQP,IAPtB,SAACM,GACvB,OAAOA,EAAUvB,MAAK,SAACgB,GACrB,OAAQA,EAAMS,SAASC,KACzB,GACF,CAIKC,CAAgBJ,IAIjBC,EAAOI,UAAW,EAClBJ,EAAOtB,UAAUH,OAAOkB,EAAOY,uBAJ/BL,EAAOI,UAAW,EAClBJ,EAAOtB,UAAUC,IAAIc,EAAOY,qBAKhC,EAyBaC,EAAkB,SAACC,EAAad,GAC3C,IAAMM,EAAYS,MAAMC,KAAKF,EAAYG,iBAAiBjB,EAAOkB,gBAC3DX,EAASO,EAAYrD,cAAcuC,EAAOmB,sBAChDb,EAAUc,SAAQ,SAACrB,GACjBM,EAAkBC,EAAWC,EAAQP,GACrCH,EAAeiB,EAAaf,EAAOC,EACrC,GACF,EC7EMA,EAAS,CACbqB,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAIdC,EAAkB,SAACC,GACvB,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,WAADtD,OAAYkD,EAAIK,QACvC,E,0GCGA,IAAMC,EAAmB,CACvBC,aAAc,eACdd,cAAe,gBACfC,qBAAsB,iBACtBP,oBAAqB,yBACrBT,gBAAiB,0BACjBC,WAAY,wBAGRlD,EAAW,CAEfQ,KAAM,gBACNG,MAAO,eACPY,MAAO,eACPR,MAAO,oBACPF,WAAY,qBACZoB,iBAAkB,8BAClBhB,aAAc,wBAGV8D,EAAU1C,SAAS9B,cAAc,kBAAkByE,QACnDC,EAAa5C,SAAS9B,cAAc,iBAEpC2E,EAAY7C,SAAS9B,cAAc,wBACnC4E,EAAa9C,SAAS9B,cAAc,yBACpC6E,EAAe/C,SAAS0B,iBAAiB,iBACzCsB,EAAYhD,SAAS9B,cAAc,oBACnC+E,EAAWjD,SAAS9B,cAAc,wBAClCgF,EAAclD,SAAS9B,cAAc,sBAGrCiF,EAAanD,SAAS9B,cAAc,qBACpCkF,EAAoBD,EAAWjF,cAAc,iBAC7CmF,EAAoBF,EAAWjF,cAAc,mBAE7CoF,EAAetD,SAASuD,MAAM,gBAC9BC,EAAYF,EAAapF,cAAc,2BACvCuF,EAAWH,EAAapF,cAAc,kCAEtCwF,EAAc1D,SAAS9B,cAAc,mBACrCyF,EAAa3D,SAAS9B,cAAc,yBACpC0F,EAAgB5D,SAAS9B,cAAc,mBAEvC2F,EAAc7D,SAASuD,MAAM,aAC7BO,EAAiBD,EAAY3F,cACjC,gCAEI6F,EAAgBF,EAAY3F,cAAc,0BAE1C8F,EAAiBhE,SAASuD,MAAM,eAChCU,EAAkBD,EAAe9F,cAAc,0BAOrD4E,EAAWxD,iBAAiB,SAAS,WACnCgC,EAAgBgC,EAAcd,GAC9BgB,EAAUU,MAAQR,EAAYvE,YAC9BsE,EAASS,MAAQP,EAAWxE,YAC5BW,EAAUkD,EACZ,IAEAH,EAAUvD,iBAAiB,SAAS,WAClCQ,EAAUmD,EACZ,IAEAW,EAActE,iBAAiB,SAAS,WACtCgC,EAAgB0C,EAAgBxB,GAChC1C,EAAUoD,EACZ,IAGAH,EAAalB,SAAQ,SAACsC,GACpB,IAAMC,EAAQD,EAAIE,QAAQ,UAC1BF,EAAI7E,iBAAiB,SAAS,kBAAMY,EAAWkE,EAAM,IACrDA,EAAM9E,iBAAiB,aAAa,SAACc,GAC/BA,EAAIkE,OAAO5E,UAAU6E,SAAS,UAChCrE,EAAWkE,EAEf,GACF,IAGA,IAAMI,EAAuB,SAAH5G,GAAuB,IAAjBkB,EAAIlB,EAAJkB,KAAMG,EAAIrB,EAAJqB,KACpCmE,EAAkBvE,IAAMC,EACxBsE,EAAkBrE,IAAME,EACxBoE,EAAkBlE,YAAcF,EAChCa,EAAUqD,EACZ,EAGMsB,EAAmB,SAACC,EAAQzG,ID/ER,SAACyG,GACzB,OAAOC,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,WAAA9C,OAAU0F,GAAU,CAChDE,OAAQ,SACR7C,QAAStB,EAAOsB,UACf8C,KAAK5C,EACV,EC2EE6C,CAAWJ,GACRG,MAAK,WACJ5G,EAAYsB,QACd,IACCwF,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,GACJ,EAGMG,EAAiB,SAACT,EAAQvG,EAAMN,EAAQU,EAAgBE,GAC5DA,EAAWU,YAAchB,EAAKO,MAAMmB,OACpB1B,EAAKO,MAAMc,MAAK,SAACC,GAAI,OAAKA,EAAKJ,MAAQxB,CAAM,IDvD7B,SAAC6G,GACjC,OAAOC,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,iBAAA9C,OAAgB0F,GAAU,CACtDE,OAAQ,SACR7C,QAAStB,EAAOsB,UACf8C,KAAK5C,EACV,CCoDImD,CAAmBV,GAChBG,MAAK,SAACnH,GACLa,EAAemB,UAAUH,OAAO5B,EAASiC,kBACzCnB,EAAWU,YAAczB,EAAKgB,MAAMmB,OACpC1B,EAAKO,MAAQhB,EAAKgB,KACpB,IACCqG,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IDxEyB,SAACN,GAC9B,OAAOC,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,iBAAA9C,OAAgB0F,GAAU,CACtDE,OAAQ,MACR7C,QAAStB,EAAOsB,UACf8C,KAAK5C,EACV,CCqEIoD,CAAgBX,GACbG,MAAK,SAACnH,GACLa,EAAemB,UAAUC,IAAIhC,EAASiC,kBACtCnB,EAAWU,YAAczB,EAAKgB,MAAMmB,OACpC1B,EAAKO,MAAQhB,EAAKgB,KACpB,IACCqG,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,GAEN,EAqBA1B,EAAahE,iBAAiB,UAlB9B,SAA0Bc,GDvGC,IAAHkF,EAAMrG,EAAMsG,ECwGlCnF,EAAIoF,iBACJC,GAAc,EAAMrF,IDzGEkF,EC0GV,CAAErG,KAAMuE,EAAUU,MAAOqB,MAAO9B,EAASS,OD1GzBjF,EAAIqG,EAAJrG,KAAMsG,EAAKD,EAALC,MAC3BZ,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,aAAa,CACzC8C,OAAQ,QACR7C,QAAStB,EAAOsB,QAChB2D,KAAMC,KAAKC,UAAU,CAAE3G,KAAAA,EAAMsG,MAAAA,MAC5BV,KAAK5C,ICsGL4C,MAAK,SAACnH,GACLgG,EAAYvE,YAAczB,EAAKuB,KAC/B0E,EAAWxE,YAAczB,EAAK6H,MAC9BrF,EAAW8C,EACb,IACC+B,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IACCa,SAAQ,WACPJ,GAAc,EAAOrF,EACvB,GACJ,IAoCAyD,EAAYvE,iBAAiB,UA9B7B,SAA0Bc,GDlJA,IAAHxC,EAAMqB,EAAMH,ECmJjCsB,EAAIoF,iBACJC,GAAc,EAAMrF,IDpJCxC,ECqJV,CAAEqB,KAAM6E,EAAeI,MAAOpF,KAAMiF,EAAcG,ODrJlCjF,EAAIrB,EAAJqB,KAAMH,EAAIlB,EAAJkB,KAC1B6F,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,UAAU,CACtC8C,OAAQ,OACR7C,QAAStB,EAAOsB,QAChB2D,KAAMC,KAAKC,UAAU,CAAE3G,KAAAA,EAAMH,KAAAA,MAC5B+F,KAAK5C,ICiJL4C,MAAK,SAACnH,GACLkF,EAAWkD,QACTtI,EACEkF,EACAhF,EACAC,EACA,CACEG,aAAc2G,EACd1G,iBAAkByG,EAClBxG,WAAYmH,GAEdzH,EAAK0B,MAAMC,MAGfa,EAAW+C,GACXY,EAAYkC,QACZzE,EAAgBuC,EAAarB,EAC/B,IACCuC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IACCa,SAAQ,WACPJ,GAAc,EAAOrF,EACvB,GACJ,IAqBA4D,EAAe1E,iBAAiB,UAhBX,SAACc,GDrJO,IAAH4F,EAAMC,ECsJ9B7F,EAAIoF,iBACJC,GAAc,EAAMrF,IDvJI4F,ECwJV,CAAEC,OAAQhC,EAAgBC,ODxJV+B,EAAMD,EAANC,OACvBtB,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,oBAAoB,CAChD8C,OAAQ,QACR7C,QAAStB,EAAOsB,QAChB2D,KAAMC,KAAKC,UAAU,CAAEK,OAAAA,MACtBpB,KAAK5C,ICoJL4C,MAAK,SAACnH,GACLkG,EAAcsC,MAAMC,gBAAkB,OAAHnH,OAAUtB,EAAKuI,OAAM,KACxD/F,EAAWgD,EACb,IACC6B,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IACCa,SAAQ,WACPJ,GAAc,EAAOrF,EACvB,GACJ,IFxJgC,SAACK,GACde,MAAMC,KAAKzB,SAAS0B,iBAAiBjB,EAAOgC,eACpDZ,SAAQ,SAACtB,IAlBM,SAACA,EAAME,GAC/B,IAAMM,EAAYS,MAAMC,KAAKlB,EAAKmB,iBAAiBjB,EAAOkB,gBACpDX,EAAST,EAAKrC,cAAcuC,EAAOmB,sBAEzCd,EAAkBC,EAAWC,EAAQP,GAErCM,EAAUc,SAAQ,SAACrB,GACjBA,EAAMlB,iBAAiB,SAAS,YAvCT,SAACiB,EAAMC,EAAOC,GACnCD,EAAMS,SAASmF,gBACjB5F,EAAM6F,kBAAkB7F,EAAM8F,QAAQC,cAEtC/F,EAAM6F,kBAAkB,IAGrB7F,EAAMS,SAASC,MAGlBZ,EAAeC,EAAMC,EAAOC,GAxBT,SAACF,EAAMC,EAAO+F,EAAc9F,GACjD,IAAMC,EAAQH,EAAKrC,cAAc,IAADc,OAAKwB,EAAMG,GAAE,WAC7CH,EAAMd,UAAUC,IAAIc,EAAOG,iBAC3BF,EAAMvB,YAAcoH,EACpB7F,EAAMhB,UAAUC,IAAIc,EAAOI,WAC7B,CAiBI2F,CAAejG,EAAMC,EAAOA,EAAMiG,kBAAmBhG,EAIzD,CA4BMiG,CAAmBnG,EAAMC,EAAOC,GAEhCK,EAAkBC,EAAWC,EAAQP,EACvC,GACF,GACF,CAMIkG,CAAkBpG,EAAME,EAC1B,GACF,CEwJAmG,CAAiBpE,GAGjBH,QAAQwE,IAAI,CD9MHlC,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,UAAU,CACtCC,QAAStB,EAAOsB,UACf8C,KAAK5C,GAoBD0C,MAAM,GAAD3F,OAAIyB,EAAOqB,QAAO,aAAa,CACzCC,QAAStB,EAAOsB,UACf8C,KAAK5C,KCuLP4C,MAAK,SAAAS,GAAuB,I,IAAAU,G,EAAA,E,4CAAAV,I,o2BAArBwB,EAAKd,EAAA,GAAEe,EAAQf,EAAA,GACfnI,EAASkJ,EAAS1H,IACxBqE,EAAYvE,YAAc4H,EAAS9H,KACnC0E,EAAWxE,YAAc4H,EAASxB,MAClC3B,EAAcsC,MAAMC,gBAAkB,OAAHnH,OAAU+H,EAASd,OAAM,KAC5Da,EAAMjF,SAAQ,SAACnE,IAhKnB,SAAiBsJ,EAAOF,GACtBE,EAAMC,OAAOH,EACf,CA+JMI,CACEtE,EACApF,EACEkF,EACAhF,EACAC,EACA,CACEG,aAAc2G,EACd1G,iBAAkByG,EAClBxG,WAAYmH,GAEdtH,GAGN,GACF,IACCkH,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,IAEF,IAAMS,EAAgB,SAAC0B,EAAW/G,GAChC,IAAMY,EAASZ,EAAIgH,UAChBD,GACDnG,EAAO7B,YAAc,gBACrB6B,EAAOI,UAAW,IAElBJ,EAAO7B,YAAc,YACrB6B,EAAOI,UAAW,EAEtB,C","sources":["webpack://mesto-project/./src/components/card.js","webpack://mesto-project/./src/components/modal.js","webpack://mesto-project/./src/components/validation.js","webpack://mesto-project/./src/components/api.js","webpack://mesto-project/./src/index.js"],"sourcesContent":["// @todo: Функция создания карточки \r\n\r\n// @todo: Функция-колбэк для лайка карточки\r\n// export function onLikeCard(evt, selector) {\r\n//   const eventTarget = evt.target;\r\n//   eventTarget.classList.toggle(selector);\r\n// }\r\n\r\nexport function createCards(cardTemplate, data, cardData, { onDeleteCard, onPreviewPicture, onLikeCard }, userId) {\r\n  const cardElement = cardTemplate.querySelector(cardData.card).cloneNode(true); //клонировали шаблонный элемент\r\n  const cardImage = cardElement.querySelector(cardData.image);\r\n  const cardLikeButton = cardElement.querySelector(cardData.buttonLike);\r\n  const likesCount = cardElement.querySelector(cardData.likes);\r\n  const cardDeleteButton = cardElement.querySelector(cardData.buttonDelete);\r\n  \r\n  cardImage.src = data.link;\r\n  cardImage.alt = `Место: ${data.name}`;\r\n  cardElement.querySelector(cardData.title).textContent = data.name;\r\n\r\n  if (data.owner._id === userId && onDeleteCard) {\r\n    cardDeleteButton.addEventListener('click', () => {\r\n      onDeleteCard(data._id, cardElement);\r\n    });\r\n  } else {\r\n    cardDeleteButton.remove();\r\n  }\r\n\r\n  const isLiked = data.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    cardLikeButton.classList.add(cardData.buttonLikeActive);\r\n  } \r\n\r\n  likesCount.textContent = data.likes.length;\r\n\r\n  if (onLikeCard) {\r\n    cardLikeButton.addEventListener('click', () => onLikeCard(data._id, data, userId, cardLikeButton, likesCount));\r\n  }\r\n\r\n  cardImage.addEventListener('click', () => onPreviewPicture(data));\r\n\r\n  return cardElement;\r\n}","// @todo: функция открытия модального окна\r\nexport function openModal (popupElement) {\r\n  popupElement.classList.add('popup_is-opened');\r\n  document.addEventListener('keydown', closeByEsc);\r\n}\r\n\r\n// @todo: функция закрытия модального окна\r\nexport function closeModal (popupElement) {\r\n  popupElement.classList.remove('popup_is-opened');\r\n  document.removeEventListener('keydown', closeByEsc);\r\n}\r\n\r\n// @todo: функция-обработчик события нажатия Esc\r\nfunction closeByEsc (evt) {\r\n  if(evt.key === 'Escape') {\r\n    closeModal(document.querySelector('.popup_is-opened'));\r\n  }\r\n}","\r\nconst showInputError = (form, input, errorMessage, config) => {\r\n  const error = form.querySelector(`.${input.id}-error`);\r\n  input.classList.add(config.inputErrorClass);\r\n  error.textContent = errorMessage;\r\n  error.classList.add(config.errorClass);\r\n};\r\n\r\nconst hideInputError = (form, input, config) => {\r\n  const error = form.querySelector(`.${input.id}-error`);\r\n  input.classList.remove(config.inputErrorClass);\r\n  error.classList.remove(config.errorClass);\r\n  error.textContent = '';\r\n};\r\n\r\nconst checkInputValidity = (form, input, config) => {\r\n  if (input.validity.patternMismatch) {\r\n    input.setCustomValidity(input.dataset.errorMessage);\r\n  } else {\r\n    input.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!input.validity.valid) {\r\n    showInputError(form, input, input.validationMessage, config);\r\n  } else {\r\n    hideInputError(form, input, config);\r\n  }\r\n};\r\n\r\n//Есть ли здесь хотя бы одно поле, которое не прошло валидацию?\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((input) => {\r\n    return !input.validity.valid;\r\n  })\r\n}\r\n\r\n//функция, которая отвечает за блокировку кнопки\r\nconst toggleButtonState = (inputList, button, config) => {\r\n  if(hasInvalidInput(inputList)) {\r\n    button.disabled = true;\r\n    button.classList.add(config.inactiveButtonClass);\r\n  } else {\r\n    button.disabled = false; \r\n    button.classList.remove(config.inactiveButtonClass);\r\n  }\r\n}\r\n\r\nconst setEventListeners = (form, config) => {\r\n  const inputList = Array.from(form.querySelectorAll(config.inputSelector));\r\n  const button = form.querySelector(config.submitButtonSelector);\r\n  // чтобы проверить состояние кнопки в самом начале\r\n  toggleButtonState(inputList, button, config);\r\n\r\n  inputList.forEach((input) => {\r\n    input.addEventListener('input', function () {\r\n      checkInputValidity(form, input, config);\r\n      // чтобы проверять его при изменении любого из полей\r\n      toggleButtonState(inputList, button, config);\r\n    });\r\n  });\r\n};\r\n\r\n//функция ответственна за включение валидации всех форм\r\nexport const enableValidation = (config) => {\r\n  const formList = Array.from(document.querySelectorAll(config.formSelector));\r\n  formList.forEach((form) => {\r\n    setEventListeners(form, config);\r\n  });\r\n}\r\n\r\nexport const clearValidation = (profileForm, config) => {\r\n  const inputList = Array.from(profileForm.querySelectorAll(config.inputSelector));\r\n  const button = profileForm.querySelector(config.submitButtonSelector);\r\n  inputList.forEach((input) => {\r\n    toggleButtonState(inputList, button, config);\r\n    hideInputError(profileForm, input, config);\r\n  })\r\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-10',\r\n  headers: {\r\n    authorization: 'b0605a47-d703-44f9-b63a-960683c9ef27',\r\n    'Content-Type': 'application/json'\r\n  }\r\n}\r\n\r\nconst getResponseData = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\n//Данные о карточках с сервера\r\nexport const getCardList = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  }).then(getResponseData);\r\n};\r\n\r\nexport const addNewCard = ({ name, link }) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, link })\r\n  }).then(getResponseData);\r\n};\r\n\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers,\r\n  }).then(getResponseData);\r\n};\r\n\r\n//Данные о пользователе с сервера\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  }).then(getResponseData);\r\n};\r\n\r\nexport const setUserInfo = ({ name, about }) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, about })\r\n  }).then(getResponseData);\r\n};\r\n\r\nexport const setUserAvatar = ({ avatar }) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar })\r\n  }).then(getResponseData);\r\n};\r\n\r\nexport const likeCardsStatus = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers,\r\n  }).then(getResponseData);\r\n};\r\n\r\nexport const dislikeCardsStatus = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers,\r\n  }).then(getResponseData);\r\n};\r\n\r\n","import \"./pages/index.css\";\r\nimport { createCards } from \"./components/card\";\r\nimport { openModal, closeModal } from \"./components/modal.js\";\r\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\r\nimport {\r\n  getCardList,\r\n  getUserInfo,\r\n  setUserInfo,\r\n  addNewCard,\r\n  setUserAvatar,\r\n  removeCard,\r\n  likeCardsStatus,\r\n  dislikeCardsStatus,\r\n} from \"./components/api.js\";\r\n\r\n//объект с настройками валидации\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\nconst cardData = {\r\n  //вынесли данные карточки в объект\r\n  card: \".places__item\",\r\n  image: \".card__image\",\r\n  title: \".card__title\",\r\n  likes: \".card__like-count\",\r\n  buttonLike: \".card__like-button\",\r\n  buttonLikeActive: \"card__like-button_is-active\",\r\n  buttonDelete: \".card__delete-button\",\r\n};\r\n\r\nconst cardTmp = document.querySelector(\"#card-template\").content; //получили доступ к содержимому\r\nconst placesList = document.querySelector(\".places__list\"); //место, куда будут добавлены карточки\r\n\r\nconst buttonAdd = document.querySelector(\".profile__add-button\");\r\nconst buttonEdit = document.querySelector(\".profile__edit-button\");\r\nconst buttonsClose = document.querySelectorAll(\".popup__close\");\r\nconst popupEdit = document.querySelector(\".popup_type_edit\");\r\nconst popupAdd = document.querySelector(\".popup_type_new-card\");\r\nconst popupAvatar = document.querySelector(\".popup_type_avatar\");\r\n\r\n\r\nconst popupImage = document.querySelector(\".popup_type_image\");\r\nconst picturePopupImage = popupImage.querySelector(\".popup__image\");\r\nconst captionPopupImage = popupImage.querySelector(\".popup__caption\");\r\n\r\nconst formEditCard = document.forms[\"edit-profile\"];\r\nconst nameInput = formEditCard.querySelector(\".popup__input_type_name\");\r\nconst jobInput = formEditCard.querySelector(\".popup__input_type_description\");\r\n\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileJob = document.querySelector(\".profile__description\");\r\nconst profileAvatar = document.querySelector(\".profile__image\");\r\n\r\nconst formNewCard = document.forms[\"new-place\"];\r\nconst namePlaceInput = formNewCard.querySelector(\r\n  \".popup__input_type_card-name\"\r\n);\r\nconst urlPlaceInput = formNewCard.querySelector(\".popup__input_type_url\");\r\n\r\nconst formAvatarCard = document.forms[\"user-avatar\"];\r\nconst linkAvatarInput = formAvatarCard.querySelector(\".popup__input_type_url\");\r\n\r\n// @todo: функция добавления карточек вынесена отдельно\r\nfunction addCard(place, cards) {\r\n  place.append(cards);\r\n}\r\n\r\nbuttonEdit.addEventListener(\"click\", function () {\r\n  clearValidation(formEditCard, validationConfig);\r\n  nameInput.value = profileName.textContent; //перед открытием заполняем поля актуальными данными\r\n  jobInput.value = profileJob.textContent;\r\n  openModal(popupEdit);\r\n});\r\n\r\nbuttonAdd.addEventListener(\"click\", function () {\r\n  openModal(popupAdd);\r\n});\r\n\r\nprofileAvatar.addEventListener(\"click\", function () {\r\n  clearValidation(formAvatarCard, validationConfig);\r\n  openModal(popupAvatar);\r\n});\r\n\r\n// @todo: функция-обработчик закрытия по крестику и события клика по оверлею\r\nbuttonsClose.forEach((btn) => {\r\n  const popup = btn.closest(\".popup\");\r\n  btn.addEventListener(\"click\", () => closeModal(popup));\r\n  popup.addEventListener(\"mousedown\", (evt) => {\r\n    if (evt.target.classList.contains(\"popup\")) {\r\n      closeModal(popup);\r\n    }\r\n  });\r\n});\r\n\r\n// @todo: Функция для просмотра карточки\r\nconst handlePreviewPicture = ({ link, name }) => {\r\n  picturePopupImage.src = link;\r\n  picturePopupImage.alt = name;\r\n  captionPopupImage.textContent = name;\r\n  openModal(popupImage);\r\n};\r\n\r\n// @todo: Функция для удаления карточки\r\nconst handleDeleteCard = (cardId, cardElement) => {\r\n  removeCard(cardId)\r\n    .then(() => {\r\n      cardElement.remove();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n// @todo: Функция для лайка карточки\r\nconst handleLikeCard = (cardId, card, userId, cardLikeButton, likesCount) => {\r\n  likesCount.textContent = card.likes.length;\r\n  const isLiked = card.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    dislikeCardsStatus(cardId)\r\n      .then((data) => {\r\n        cardLikeButton.classList.remove(cardData.buttonLikeActive);\r\n        likesCount.textContent = data.likes.length;\r\n        card.likes = data.likes;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } else {\r\n    likeCardsStatus(cardId)\r\n      .then((data) => {\r\n        cardLikeButton.classList.add(cardData.buttonLikeActive);\r\n        likesCount.textContent = data.likes.length;\r\n        card.likes = data.likes;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n};\r\n\r\n// Обработчик редактирование профиля\r\nfunction handleFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  renderLoading(true, evt);\r\n  setUserInfo({ name: nameInput.value, about: jobInput.value })\r\n    .then((data) => {\r\n      profileName.textContent = data.name;\r\n      profileJob.textContent = data.about;\r\n      closeModal(popupEdit);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, evt);\r\n    })\r\n}\r\n\r\n// Прикрепляем обработчик к форме:\r\nformEditCard.addEventListener(\"submit\", handleFormSubmit);\r\n\r\n// Обработчик добавления карточки\r\nfunction addNewCardSubmit(evt) {\r\n  evt.preventDefault();\r\n  renderLoading(true, evt);\r\n  addNewCard({ name: namePlaceInput.value, link: urlPlaceInput.value })\r\n    .then((data) => {\r\n      placesList.prepend(\r\n        createCards(\r\n          cardTmp,\r\n          data,\r\n          cardData,\r\n          {\r\n            onDeleteCard: handleDeleteCard,\r\n            onPreviewPicture: handlePreviewPicture,\r\n            onLikeCard: handleLikeCard,\r\n          },\r\n          data.owner._id\r\n        )\r\n      );\r\n      closeModal(popupAdd);\r\n      formNewCard.reset();\r\n      clearValidation(formNewCard, validationConfig);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, evt);\r\n    })\r\n}\r\n\r\nformNewCard.addEventListener(\"submit\", addNewCardSubmit);\r\n\r\n// Обработчик загрузки аватарки\r\nconst addNewAvatar = (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, evt);\r\n  setUserAvatar({ avatar: linkAvatarInput.value })\r\n    .then((data) => {\r\n      profileAvatar.style.backgroundImage = `url(${data.avatar})`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, evt);\r\n    })\r\n}\r\n\r\nformAvatarCard.addEventListener(\"submit\", addNewAvatar);\r\n\r\n//валидация\r\nenableValidation(validationConfig);\r\n\r\n//API\r\nPromise.all([getCardList(), getUserInfo()])\r\n  .then(([cards, userData]) => {\r\n    const userId = userData._id;\r\n    profileName.textContent = userData.name;\r\n    profileJob.textContent = userData.about;\r\n    profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n    cards.forEach((data) => {\r\n      addCard(\r\n        placesList,\r\n        createCards(\r\n          cardTmp,\r\n          data,\r\n          cardData,\r\n          {\r\n            onDeleteCard: handleDeleteCard,\r\n            onPreviewPicture: handlePreviewPicture,\r\n            onLikeCard: handleLikeCard,\r\n          },\r\n          userId\r\n        )\r\n      );\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nconst renderLoading = (isLoading, evt) => {\r\n  const button = evt.submitter;\r\n  if(isLoading) {\r\n    button.textContent = \"Сохранение...\";\r\n    button.disabled = true;\r\n  } else {\r\n    button.textContent = \"Сохранить\";\r\n    button.disabled = false;\r\n  }\r\n}"],"names":["createCards","cardTemplate","data","cardData","_ref","userId","onDeleteCard","onPreviewPicture","onLikeCard","cardElement","querySelector","card","cloneNode","cardImage","image","cardLikeButton","buttonLike","likesCount","likes","cardDeleteButton","buttonDelete","src","link","alt","concat","name","title","textContent","owner","_id","addEventListener","remove","some","like","classList","add","buttonLikeActive","length","openModal","popupElement","document","closeByEsc","closeModal","removeEventListener","evt","key","hideInputError","form","input","config","error","id","inputErrorClass","errorClass","toggleButtonState","inputList","button","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","profileForm","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","baseUrl","headers","authorization","getResponseData","res","ok","json","Promise","reject","status","validationConfig","formSelector","cardTmp","content","placesList","buttonAdd","buttonEdit","buttonsClose","popupEdit","popupAdd","popupAvatar","popupImage","picturePopupImage","captionPopupImage","formEditCard","forms","nameInput","jobInput","profileName","profileJob","profileAvatar","formNewCard","namePlaceInput","urlPlaceInput","formAvatarCard","linkAvatarInput","value","btn","popup","closest","target","contains","handlePreviewPicture","handleDeleteCard","cardId","fetch","method","then","removeCard","catch","err","console","log","handleLikeCard","dislikeCardsStatus","likeCardsStatus","_ref2","about","preventDefault","renderLoading","body","JSON","stringify","finally","prepend","reset","_ref3","avatar","style","backgroundImage","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","enableValidation","all","cards","userData","place","append","addCard","isLoading","submitter"],"sourceRoot":""}